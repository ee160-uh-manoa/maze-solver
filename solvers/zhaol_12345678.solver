#include "maze.h"

void my_function() {
  // feel free to define your own functions
}

char solver(int possible_steps[MAX_POSSIBLE_STEPS],
    struct Coordinate position,
    struct Coordinate destination,
    int       int_array[ARRAY_MAX],
    char     char_array[ARRAY_MAX],
    float   float_array[ARRAY_MAX],
    double double_array[ARRAY_MAX],
    int       int_table[MAZE_HEIGHT][MAZE_WIDTH],
    char     char_table[MAZE_HEIGHT][MAZE_WIDTH],
    float   float_table[MAZE_HEIGHT][MAZE_WIDTH],
    double double_table[MAZE_HEIGHT][MAZE_WIDTH],
    FILE *log_file) {
  
  // the insides of this entire function should be rewritten
    
  fprintf(log_file, "deciding next step...\n"); // you can print out to a debug/log file if you need to
  
  int_array[0]++; // none of the arrays and tables are altered by the main program; so feel free to use it as you wish
  
  int next_step = NORTH; //you can specify the next step using these macros: https://github.com/ee160-uh-manoa/maze-solver/blob/master/source/macros.h#L36-42
  
  // your solver can analyze the possible_steps array to decide where the next_step should be, like the following:
  if (possible_steps[NORTH] == NORTH) {
    // next_step can be NORTH
  } else if (possible_steps[EAST] == EAST) {
    // next_step can be EAST
  } else if (possible_steps[WEST] == WEST) {
    // next_step can be WEST
  } else if (possible_steps[SOUTH] == SOUTH) {
    // next_step can be SOUTH
  } else {
    // an error has occurred and possible_steps array only contains NO_MOVES
  }
  
  my_function(); // feel free to use your own functions
  
  // this switch is hardcoding the path for the simple maze and will fail for other mazes
  switch (int_array[0]) {
    case 1:
      next_step = EAST;
      break;
    case 2:
      next_step = SOUTH;
      break;
    case 3:
      next_step = EAST;
      break;
    case 4:
      next_step = SOUTH;
      break;
    case 5:
      next_step = SOUTH;
      break;
    case 6:
      next_step = SOUTH;
      break;
    case 7:
      next_step = WEST;
      break;
    case 8:
      next_step = WEST;
      break;
    case 9:
      next_step = SOUTH;
      break;
    case 10:
      next_step = SOUTH;
      break;
    case 11:
      next_step = EAST;
      break;
    case 12:
      next_step = EAST;
      break;
    case 13:
      next_step = SOUTH;
      break;
    case 14:
      next_step = SOUTH;
      break;
    case 15:
      next_step = EAST;
      break;
    case 16:
      next_step = EAST;
      break;
    case 17:
      next_step = NORTH;
      break;
    case 18:
      next_step = EAST;
      break;
    case 19:
      next_step = EAST;
      break;
    case 20:
      next_step = NORTH;
      break;
    case 21:
      next_step = NORTH;
      break;
    case 22:
      next_step = EAST;
      break;
    case 23:
      next_step = SOUTH;
      break;
    case 24:
      next_step = SOUTH;
      break;
    case 25:
      next_step = SOUTH;
      break;
    case 26:
      next_step = SOUTH;
      break;
    case 27:
      next_step = EAST;
      break;
    case 28:
      next_step = EAST;
      break;
  }
  
  return next_step; // the solver function is expected to return the next step
}